#include<bits/stdc++.h>
using namespace std;

typedef struct Node
{
	int data;
	struct Node* left;
	struct Node* right;
	
	Node(int val)
	{
		data= val;
		left=right=NULL;
	}
}node;

void levelorder(Node* root)
{
	if(root==NULL)
		return;
		
	queue<Node*> q;
	
	q.push(root);
	
	while(!q.empty())
	{
		int n=q.size();
		
		cout<<"\n";
		for(int i=0; i<n; i++)
		{
			Node* temp=q.front();
			q.pop();
			cout<<temp->data<<" ";
			if(temp->left!=NULL)
				q.push(temp->left);
			if(temp->right!=NULL)
				q.push(temp->right);
		}	
	}
}

int main()
{
	node*root=new node(1);
	root->left=new node(2);
	root->right=new node(3);
	root->right->left=new node(7);
	root->right->right=new node(9);
	root->right->left->left=new node(21);
	root->right->right->right=new node(11);
	
	levelorder(root);
}

------------------------------------------------------------------------------------------------------

https://leetcode.com/problems/binary-tree-level-order-traversal/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        
        vector<vector<int>> v;
        
        if(!root)
            return {};
        
        queue<TreeNode*> q;
        
        q.push(root);
        
        while(!q.empty())
        {
            int n=q.size();
            
            vector<int> level;
            
            for(int i=0; i<n; i++)
            {
                TreeNode* temp=q.front();
                q.pop();
                
                level.push_back(temp->val);
                
                if(temp->left)
                    q.push(temp->left);
                if(temp->right)
                    q.push(temp->right);
            }
            v.push_back(level);
        }
        return v;
    }
};