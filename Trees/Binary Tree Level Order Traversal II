https://leetcode.com/problems/binary-tree-level-order-traversal-ii/

//Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        
        if(!root)
            return {};
        
        queue<TreeNode*> q;
        
        q.push(root);
        
        vector<vector<int>> ans;
        
        while(!q.empty())
        {
            int n=q.size();
            vector<int> v;
            
            for(int i=0; i<n; i++)
            {
                TreeNode* temp = q.front();
                
                q.pop();
                
                v.push_back(temp->val);
                
                if(temp->left)
                    q.push(temp->left);
                
                if(temp->right)
                    q.push(temp->right);  
            }
            
            ans.push_back(v);
        }
         
        reverse(ans.begin(), ans.end());
        
        return ans;
    }
};